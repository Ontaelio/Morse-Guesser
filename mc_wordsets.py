import json
import requests
from random import *

## set defaults
practice_file = 'simple_words.txt'
wordset_file = 'hard_words.txt'
words_to_ask = 5
default_timeout = 1
false_word_min = 4
false_word_max = 10
max_wordset_size = 100
morse_frequency = 800
dit_duration = 80
sound_on = True


def save_wordset(w_list, d_list):
    '''
    Save fetched words in the wordset for future use
    '''

    try:
        with open(wordset_file) as h_words:
            wl = json.load(h_words)
    except FileNotFoundError:
        wl = []

    if wl:
        shuffle(wl)
        while len(wl) > (max_wordset_size - words_to_ask):
            wl.pop()

    for k in range(len(w_list)):
        t = [w_list[k], d_list[k]]
        wl.append(t)

    try:
        with open(wordset_file, 'w') as h_words:
            json.dump(wl, h_words)
    except OSError:
        print('Some IO error occured, wordset not saved')
        return 0

    return 1

def fetch_from_simple():
    '''
    Fetches a list of words from provided file simple_file
    (each word on its own line).
    '''
    
    words = []

    try:
        with open(practice_file) as s_words:
            for line in s_words.readlines():
                words.append(line.strip())
    except FileNotFoundError:
        print('Local practice wordset not found.')
        print(f"Create a txt file '{practice_file}' and fill it with at least"
              f" {words_to_ask} words, each in a new line.")
        return 0
    shuffle(words)          
    return words[0 : words_to_ask], 0

def fetch_from_hard():
    '''
    Fetches a list of words and definitions from provided file hard_file
    (list of lists, generated by fetch_from_net).
    '''
    
    words = []
    definitions = []

    try:
        with open(wordset_file) as h_words:
            wl = json.load(h_words)
    except FileNotFoundError:
        print('Local wordset not found.')
        print("Create it by running the 'Fetch from the Web' option.")
        return 0, 0
              
    if len(wl) < words_to_ask:
        print('Local wordset is too small!')
        print("Expand it by running the 'Fetch from Internet' option.")
        return 0, 0
    
    shuffle(wl)
    for k in range(0, words_to_ask):
        words.append(wl[k][0])
        definitions.append(wl[k][1])

    return words, definitions

def fetch_from_net():
    '''
    Fetches a list of words and definitions from the web
    '''
    
    words = []
    definitions = []
    url = "https://random-words-api.vercel.app/word"
    print('Fetching a wordset from the web ', end = '')
    
    for k in range(words_to_ask):
        test_result = 'cÃ¡t'

        ## test for non-ASCII characters
        while not test_result.isascii():
            try:
                response = requests.get(url, timeout = default_timeout)
            except requests.exceptions.Timeout:
                print('\nCommunication timeout.\nPlease check your connection and'
                      ' try again or adjust the default_timeout setting.')
                return 0, 0
            except requests.RequestException:
                print('\nAn error occured while trying to fetch a wordset.')
                return 0, 0
                
            data = response.json()
            test_result = data[0]["word"]
            
        words.append(data[0]["word"])
        definitions.append(data[0]["definition"])
        print('.', end='')

    print('\n')
    save_wordset(words, definitions)
    return words, definitions

def false_words():
    '''
    Lazy random word generator. For great justice!
    '''
    
    vowels = ['a', 'e', 'i', 'o', 'u']
    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',
                  'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']
    words = []

    for _ in range(words_to_ask):
        was_consonant = 0
        was_vowel = 0
        s = ''
        word_len = randint(false_word_min, false_word_max)

        while len(s) < word_len:
            if randint(0,1) and not randint(0, was_vowel):
                l = vowels[randint(0, len(vowels)-1)]
                was_vowel += 1
                was_consonant = 0
                        
            elif not randint(0, was_consonant):
                l = consonants[randint(0, len(consonants)-1)]
                was_vowel = 0
                was_consonant += 1

            else: l = ''
            s += l

        words.append(s)

    return words, []

def get_codes(morse_codes_file):
    '''Get Morse codes from file defined as morse_codes_file'''

    try:
        with open(morse_codes_file) as codes:
            mc = json.load(codes)
    except FileNotFoundError:
        print(f"File '{morse_codes_file}' not found.")
        return 0

    ## need this for multi-word sets, if any
    mc[' '] = '\t'
    return mc

##print(fetch_from_simple())
##print(fetch_from_hard())
##a, b = fetch_from_net()
##print(a, b)
##print(false_words())
##
##if a: save_wordset(a, b)
